/**
* This file was automatically generated by @abstract-money/ts-codegen@0.37.0-beta-3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @abstract-money/ts-codegen generate command to regenerate this file.
*/

import { CamelCasedProperties } from "type-fest";
import { SigningCosmWasmClient, ExecuteResult } from "@abstract-money/cli/cosmjs";
import { AccountPublicClient, AccountWalletClient, AppExecuteMsg, AppExecuteMsgFactory, AdapterExecuteMsg, AdapterExecuteMsgFactory } from "@abstract-money/core";
import { StdFee, Coin } from "@abstract-money/cli/cosmjs";
import { InstantiateMsg, ExecuteMsg, QueryMsg, MigrateMsg, ConfigResponse, CountResponse } from "./Pop.types";
import { PopQueryMsgBuilder, PopExecuteMsgBuilder } from "./Pop.message-builder";
export interface IPopAppQueryClient {
  moduleId: string;
  accountPublicClient: AccountPublicClient;
  _moduleAddress: string | undefined;
  config: () => Promise<ConfigResponse>;
  count: () => Promise<CountResponse>;
  getAddress: () => Promise<string>;
}
export class PopAppQueryClient implements IPopAppQueryClient {
  accountPublicClient: AccountPublicClient;
  moduleId: string;
  _moduleAddress: string | undefined;

  constructor({
    accountPublicClient,
    moduleId
  }: {
    accountPublicClient: AccountPublicClient;
    moduleId: string;
  }) {
    this.accountPublicClient = accountPublicClient;
    this.moduleId = moduleId;
    this.config = this.config.bind(this);
    this.count = this.count.bind(this);
  }

  config = async (): Promise<ConfigResponse> => {
    return this._query(PopQueryMsgBuilder.config());
  };
  count = async (): Promise<CountResponse> => {
    return this._query(PopQueryMsgBuilder.count());
  };
  getAddress = async (): Promise<string> => {
    if (!this._moduleAddress) {
      const address = await this.accountPublicClient.getModuleAddress({
        id: this.moduleId
      });

      if (address === null) {
        throw new Error(`Module ${this.moduleId} not installed`);
      }

      this._moduleAddress = address;
    }

    return this._moduleAddress!;
  };
  _query = async (queryMsg: QueryMsg): Promise<any> => {
    return this.accountPublicClient.queryModule({
      moduleId: this.moduleId,
      moduleType: "app",
      queryMsg
    });
  };
}
export interface IPopAppClient extends IPopAppQueryClient {
  accountWalletClient: AccountWalletClient;
  updateConfig: (fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  increment: (fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  reset: (params: CamelCasedProperties<Extract<ExecuteMsg, {
    reset: unknown;
  }>["reset"]>, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
}
export class PopAppClient extends PopAppQueryClient implements IPopAppClient {
  accountWalletClient: AccountWalletClient;

  constructor({
    accountPublicClient,
    accountWalletClient,
    moduleId
  }: {
    accountPublicClient: AccountPublicClient;
    accountWalletClient: AccountWalletClient;
    moduleId: string;
  }) {
    super({
      accountPublicClient,
      moduleId
    });
    this.accountWalletClient = accountWalletClient;
    this.updateConfig = this.updateConfig.bind(this);
    this.increment = this.increment.bind(this);
    this.reset = this.reset.bind(this);
  }

  updateConfig = async (fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return this._execute(PopExecuteMsgBuilder.updateConfig(), fee_, memo_, funds_);
  };
  increment = async (fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return this._execute(PopExecuteMsgBuilder.increment(), fee_, memo_, funds_);
  };
  reset = async (params: CamelCasedProperties<Extract<ExecuteMsg, {
    reset: unknown;
  }>["reset"]>, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return this._execute(PopExecuteMsgBuilder.reset(params), fee_, memo_, funds_);
  };
  _execute = async (msg: ExecuteMsg, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    const signingCwClient = await this.accountWalletClient.getSigningCosmWasmClient();
    const sender = await this.accountWalletClient.getSenderAddress();
    const moduleMsg: AppExecuteMsg<ExecuteMsg> = AppExecuteMsgFactory.executeApp(msg);
    return await signingCwClient.execute(sender, await this.getAddress(), moduleMsg, fee_, memo_, funds_);
  };
}