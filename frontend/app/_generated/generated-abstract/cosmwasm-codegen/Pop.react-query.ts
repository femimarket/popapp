/**
* This file was automatically generated by @abstract-money/ts-codegen@0.37.0-beta-3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @abstract-money/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@abstract-money/cli/cosmjs";
import { StdFee, Coin } from "@abstract-money/cli/cosmjs";
import { InstantiateMsg, ExecuteMsg, QueryMsg, MigrateMsg, ConfigResponse, CountResponse } from "./Pop.types";
import { PopAppQueryClient, PopAppClient } from "./Pop.client";
export const popQueryKeys = {
  contract: ([{
    contract: "pop"
  }] as const),
  address: (contractAddress: string | undefined) => ([{ ...popQueryKeys.contract[0],
    address: contractAddress
  }] as const),
  config: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...popQueryKeys.address(contractAddress)[0],
    method: "config",
    args
  }] as const),
  count: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...popQueryKeys.address(contractAddress)[0],
    method: "count",
    args
  }] as const)
};
export interface PopReactQuery<TResponse, TData = TResponse> {
  client: PopAppQueryClient | undefined;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface PopCountQuery<TData> extends PopReactQuery<CountResponse, TData> {}
export function usePopCountQuery<TData = CountResponse>({
  client,
  options
}: PopCountQuery<TData>) {
  return useQuery<CountResponse, Error, TData>(popQueryKeys.count(client?._moduleAddress), () => client ? client.count() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface PopConfigQuery<TData> extends PopReactQuery<ConfigResponse, TData> {}
export function usePopConfigQuery<TData = ConfigResponse>({
  client,
  options
}: PopConfigQuery<TData>) {
  return useQuery<ConfigResponse, Error, TData>(popQueryKeys.config(client?._moduleAddress), () => client ? client.config() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface PopResetMutation {
  client: PopAppClient;
  msg: {
    count: number;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function usePopResetMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, PopResetMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, PopResetMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.reset(msg, fee, memo, funds), options);
}
export interface PopIncrementMutation {
  client: PopAppClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function usePopIncrementMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, PopIncrementMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, PopIncrementMutation>(({
    client,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.increment(fee, memo, funds), options);
}
export interface PopUpdateConfigMutation {
  client: PopAppClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function usePopUpdateConfigMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, PopUpdateConfigMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, PopUpdateConfigMutation>(({
    client,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateConfig(fee, memo, funds), options);
}