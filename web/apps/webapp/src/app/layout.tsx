'use client'

// import type { Metadata } from "next";
import localFont from "next/font/local";
import "./globals.css";
import { QueryClient, QueryClientProvider } from '@tanstack/react-query'
import { grazProvider } from '@abstract-money/provider-graz'
import { AbstractProvider, createConfig } from '@abstract-money/react'

import { GrazProvider } from 'graz'
import {appChain} from "@/lib/utils";

const geistSans = localFont({
  src: "./fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 900",
});
const geistMono = localFont({
  src: "./fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
  weight: "100 900",
});

// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

const client = new QueryClient({
  defaultOptions: {
    queries: {
      cacheTime: 1_000 * 60 * 60 * 24, // 24 hours
      networkMode: 'offlineFirst',
      refetchOnWindowFocus: false,
      retry: 0,
    },
    mutations: {
      networkMode: 'offlineFirst',
    },
  },
})

const abstractConfig = createConfig({
// @ts-ignore
  provider: grazProvider,
  apiUrl: process.env.NEXT_PUBLIC_ABSTRACT_API_URL || 'https://api.abstract.money/graphql',
})

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body className={`${geistSans.variable} ${geistMono.variable} antialiased`}>
      <QueryClientProvider client={client}>
        <GrazProvider
          // @ts-ignore
          client={client}
          grazOptions={{
            //@ts-ignore
            chains: [appChain],
            chainsConfig: {
              [appChain.chainId]: {
                gas: {
                  price: '0.25',
                  denom: 'untrn',
                },
              },
            },
          }}
        >
          <AbstractProvider config={abstractConfig}>
            {children}
          </AbstractProvider>
        </GrazProvider>
      </QueryClientProvider>
      </body>
    </html>
  );
}
