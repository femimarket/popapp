/**
* This file was automatically generated by @abstract-money/ts-codegen@0.37.0-beta-3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @abstract-money/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@abstract-money/cli/cosmjs";
import { StdFee, Coin } from "@abstract-money/cli/cosmjs";
import { HexBinary, InstantiateMsg, RawInstantiateForRawDcapAttestation, RawDcapAttestation, RawCoreInstantiate, RawConfig, Duration, RawLightClientOpts, ExecuteMsg, OrderType, Decimal, Addr, Uint128, Trade, RawAttestedForRawAttestedMsgSansHandlerForUpdateMsgAndRawDcapAttestation, RawAttestedMsgSansHandlerForUpdateMsg, QueryMsg, MigrateMsg, ConfigResponse, QueryPairsResponse, GetAllCurrencyPairsResponse, CurrencyPair, QueryRequestsResponse, EncryptedTrade, QueryStateResponse, TradeResponse, GetPriceResponse, QuotePrice, Timestamp } from "./Pop.types";
import { PopAppQueryClient, PopAppClient } from "./Pop.client";
export const popQueryKeys = {
  contract: ([{
    contract: "pop"
  }] as const),
  address: (contractAddress: string | undefined) => ([{ ...popQueryKeys.contract[0],
    address: contractAddress
  }] as const),
  config: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...popQueryKeys.address(contractAddress)[0],
    method: "config",
    args
  }] as const),
  queryTrade: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...popQueryKeys.address(contractAddress)[0],
    method: "query_trade",
    args
  }] as const),
  queryRequests: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...popQueryKeys.address(contractAddress)[0],
    method: "query_requests",
    args
  }] as const),
  queryState: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...popQueryKeys.address(contractAddress)[0],
    method: "query_state",
    args
  }] as const),
  queryPairs: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...popQueryKeys.address(contractAddress)[0],
    method: "query_pairs",
    args
  }] as const)
};
export interface PopReactQuery<TResponse, TData = TResponse> {
  client: PopAppQueryClient | undefined;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface PopQueryPairsQuery<TData> extends PopReactQuery<QueryPairsResponse, TData> {}
export function usePopQueryPairsQuery<TData = QueryPairsResponse>({
  client,
  options
}: PopQueryPairsQuery<TData>) {
  return useQuery<QueryPairsResponse, Error, TData>(popQueryKeys.queryPairs(client?._moduleAddress), () => client ? client.queryPairs() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface PopQueryStateQuery<TData> extends PopReactQuery<QueryStateResponse, TData> {}
export function usePopQueryStateQuery<TData = QueryStateResponse>({
  client,
  options
}: PopQueryStateQuery<TData>) {
  return useQuery<QueryStateResponse, Error, TData>(popQueryKeys.queryState(client?._moduleAddress), () => client ? client.queryState() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface PopQueryRequestsQuery<TData> extends PopReactQuery<QueryRequestsResponse, TData> {}
export function usePopQueryRequestsQuery<TData = QueryRequestsResponse>({
  client,
  options
}: PopQueryRequestsQuery<TData>) {
  return useQuery<QueryRequestsResponse, Error, TData>(popQueryKeys.queryRequests(client?._moduleAddress), () => client ? client.queryRequests() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface PopQueryTradeQuery<TData> extends PopReactQuery<TradeResponse, TData> {
  args: undefined | {
    base: string;
    quote: string;
  };
}
export function usePopQueryTradeQuery<TData = TradeResponse>({
  client,
  args,
  options
}: PopQueryTradeQuery<TData>) {
  return useQuery<TradeResponse, Error, TData>(popQueryKeys.queryTrade(client?._moduleAddress, args), () => client && args ? client.queryTrade({
    base: args.base,
    quote: args.quote
  }) : Promise.reject(new Error("Invalid client or args")), { ...options, enabled: !!args &&  !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface PopConfigQuery<TData> extends PopReactQuery<ConfigResponse, TData> {}
export function usePopConfigQuery<TData = ConfigResponse>({
  client,
  options
}: PopConfigQuery<TData>) {
  return useQuery<ConfigResponse, Error, TData>(popQueryKeys.config(client?._moduleAddress), () => client ? client.config() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface PopUpdateMutation {
  client: PopAppClient;
  msg: {
    data: RawAttestedForRawAttestedMsgSansHandlerForUpdateMsgAndRawDcapAttestation;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function usePopUpdateMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, PopUpdateMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, PopUpdateMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.update(msg, fee, memo, funds), options);
}
export interface PopTradeCiphertextMutation {
  client: PopAppClient;
  msg: {
    ciphertext: number[];
    digest: HexBinary;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function usePopTradeCiphertextMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, PopTradeCiphertextMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, PopTradeCiphertextMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.tradeCiphertext(msg, fee, memo, funds), options);
}
export interface PopTradeMutation {
  client: PopAppClient;
  msg: {
    data: Trade;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function usePopTradeMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, PopTradeMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, PopTradeMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.trade(msg, fee, memo, funds), options);
}
export interface PopResetMutation {
  client: PopAppClient;
  msg: {
    count: number;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function usePopResetMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, PopResetMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, PopResetMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.reset(msg, fee, memo, funds), options);
}
export interface PopIncrementMutation {
  client: PopAppClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function usePopIncrementMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, PopIncrementMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, PopIncrementMutation>(({
    client,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.increment(fee, memo, funds), options);
}
export interface PopUpdateConfigMutation {
  client: PopAppClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function usePopUpdateConfigMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, PopUpdateConfigMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, PopUpdateConfigMutation>(({
    client,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateConfig(fee, memo, funds), options);
}