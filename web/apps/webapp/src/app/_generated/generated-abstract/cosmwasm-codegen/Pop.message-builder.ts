// @ts-nocheck
          /**
* This file was automatically generated by @abstract-money/ts-codegen@0.37.0-beta-3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @abstract-money/ts-codegen generate command to regenerate this file.
*/

import { HexBinary, InstantiateMsg, RawInstantiateForRawDcapAttestation, RawDcapAttestation, RawCoreInstantiate, RawConfig, Duration, RawLightClientOpts, ExecuteMsg, OrderType, Decimal, Addr, Uint128, Trade, RawAttestedForRawAttestedMsgSansHandlerForUpdateMsgAndRawDcapAttestation, RawAttestedMsgSansHandlerForUpdateMsg, QueryMsg, MigrateMsg, ConfigResponse, QueryPairsResponse, GetAllCurrencyPairsResponse, CurrencyPair, QueryRequestsResponse, EncryptedTrade, QueryStateResponse, TradeResponse, GetPriceResponse, QuotePrice, Timestamp } from "./Pop.types";
import { CamelCasedProperties } from "type-fest";
export abstract class PopExecuteMsgBuilder {
static updateConfig = (): ExecuteMsg => {
  return {
    update_config: ({} as const)
  };
};
static increment = (): ExecuteMsg => {
  return {
    increment: ({} as const)
  };
};
static reset = ({
  count
}: CamelCasedProperties<Extract<ExecuteMsg, {
  reset: unknown;
}>["reset"]>): ExecuteMsg => {
  return {
    reset: ({
      count
    } as const)
  };
};
static trade = ({
  data
}: CamelCasedProperties<Extract<ExecuteMsg, {
  trade: unknown;
}>["trade"]>): ExecuteMsg => {
  return {
    trade: ({
      data
    } as const)
  };
};
static tradeCiphertext = ({
  ciphertext,
  digest
}: CamelCasedProperties<Extract<ExecuteMsg, {
  trade_ciphertext: unknown;
}>["trade_ciphertext"]>): ExecuteMsg => {
  return {
    trade_ciphertext: ({
      ciphertext,
      digest
    } as const)
  };
};
static update = ({
  data
}: CamelCasedProperties<Extract<ExecuteMsg, {
  update: unknown;
}>["update"]>): ExecuteMsg => {
  return {
    update: ({
      data
    } as const)
  };
};
}
export abstract class PopQueryMsgBuilder {
static config = (): QueryMsg => {
  return {
    config: ({} as const)
  };
};
static queryTrade = ({
  base,
  quote
}: CamelCasedProperties<Extract<QueryMsg, {
  query_trade: unknown;
}>["query_trade"]>): QueryMsg => {
  return {
    query_trade: ({
      base,
      quote
    } as const)
  };
};
static queryRequests = (): QueryMsg => {
  return {
    query_requests: ({} as const)
  };
};
static queryState = (): QueryMsg => {
  return {
    query_state: ({} as const)
  };
};
static queryPairs = (): QueryMsg => {
  return {
    query_pairs: ({} as const)
  };
};
}